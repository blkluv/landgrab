<% tiles ||= [] %>
<% associated_tiles ||= [] %>

<%= render 'layouts/leaflet_imports' %>

<%= render 'layouts/leaflet_helpers' %>

<div id="map" style="width: 100%; height: 500px" class="mb-3"></div>

<% tiles = tiles.each { |t| t.map_popup = associated_tiles.include?(t) } %>
<script>
  const styleBase = { color: 'black', weight: 2 }
  const styleAssociated = {...styleBase, ...{ opacity: 0.65, fill: true, fillOpacity: 0.5, fillColor: 'blue' }};
  const styleUnassociated = {...styleBase, ...{ opacity: 1, fillOpacity: 0.3, fillColor: 'grey' }}

  function onEachFeature(feature, layer) {
    layer.on({
      click: () => {
        if (feature.properties.focussed) {
          layer.setStyle(styleUnassociated);
          } else {
          layer.setStyle(styleAssociated);
        }
        feature.properties.focussed = !feature.properties.focussed;
      }
    });
  }

  function tileStyle(feature) {
    const base = { color: 'black', weight: 2 }
    // Style docs: https://leafletjs.com/reference.html#path-option
    if (feature.geometry.properties.focussed) {
      return styleAssociated
    } else {
      return styleUnassociated;
    }
  };

  var map = L.map('map');

  addFullscreenButton(map);
  addAllLayers(map);

  var allTilesGeoJson = [<%= tiles.map(&:to_geojson).join(', ').html_safe %>];
  var tiles = L.geoJSON(allTilesGeoJson, { onEachFeature: onEachFeature, style: tileStyle }).addTo(map);

  // Fit map to tile bounds
  map.fitBounds(tiles.getBounds());
</script>
