<% edit_mode ||= false %>

<%= render 'layouts/leaflet_imports' %>

<%= render 'layouts/leaflet_helpers' %>

<div id="map" style="width: 100%; height: 500px;" class="mt-3"></div>

<script>
  var map = L.map('map', { scrollWheelZoom: false });

  disableScrollWheelZoomUnlessFocussed(map);

  addFullscreenButton(map);
  addAllLayers(map);

  const handlePolygonChange = (latlngs) => {
    copyCoordsToFormField(latlngs);
    updatePolygonArea(latlngs);
  }

  const copyCoordsToFormField = (latlngs) => {
    var latlngs = latlngs.map(function(coord) { return "" + coord.lng.toFixed(6) + " " + coord.lat.toFixed(6); });
    var polygon_field = document.getElementById('plot_polygon');
    // Define polygon (including first point as final point to close the shape)
    polygon_field.value = "POLYGON ((" + latlngs.join(', ') + ", " + latlngs[0] + "))";
  };

  const updatePolygonArea = (latlngs) => {
    const areaField = document.getElementById('approx_area');
    if (!areaField) { return; }
    var area_m = L.GeometryUtil.geodesicArea(latlngs);
    var area_acre = area_m / 4046.86;
    areaField.value = '' + area_m.toFixed(0) + ' m^3 or ' + area_acre.toFixed(4) + ' acres';
  };

  const renderPolygon = (map, latlngs, polygon_colour, editable) => {
    var polygon = L.polygon(latlngs, { color: polygon_colour }).addTo(map);

    if (editable) {
      polygon.editing.enable();
    }

    fitMapToPolygon(map, polygon);

    return polygon;
  };

  <% if plot.polygon.nil? # i.e. new record and no invalid polygon set %>
    map.setView(<%= Plot::DEFAULT_COORDS %>, 19);
    // FeatureGroup is to store editable layers
    var drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);
    var drawControl = new L.Control.Draw({
      draw: {
        polyline: false,
        rectangle: false,
        circle: false,
        circlemarker: false,
        marker: false
      }
    });
    map.addControl(drawControl);

    map.on(L.Draw.Event.CREATED, function (e) {
      var type = e.layerType,
      layer = e.layer;
      // Add completed polygon to the map
      map.addLayer(layer);
      layer.editing.enable();
      // Remove 'draw' button to prevent drawing more than one polygon.
      map.removeControl(drawControl);

      // Update the form input once the polygon is drawn
      handlePolygonChange(layer._latlngs[0]);
    });
  <% else # polygon is present %>
    // Prepare lat/lng points: x,y converted to y,x and excluding final (dupe) point
    var latlngs = <%= plot.polygon.coordinates[0][0...-1].map(&:reverse) %>;
    var polygon = renderPolygon(map, latlngs, '<%= edit_mode ? 'blue' : 'red' %>', <%= edit_mode %>);

    <% plot.overlapping_polygons.map do |op| %>
      renderPolygon(map, <%= op.polygon.coordinates[0][0...-1].map(&:reverse) %>, 'black', false)
    <% end %>

    updatePolygonArea(polygon._latlngs[0])
  <% end %>

  // Re-update the form input when any polygon points are moved
  map.on(L.Draw.Event.EDITVERTEX, (e) => handlePolygonChange(e.poly._latlngs[0]));
</script>
