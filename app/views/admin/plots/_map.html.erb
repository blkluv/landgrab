<script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"/>

<script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css"/>

<div id="map" style="width: 100%; height: 500px;" class="mt-3"></div>

<script>
  var map = L.map('map');
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      maxNativeZoom:19,
      maxZoom:25
  }).addTo(map);

  const copyCoordsToFormField = (latlngs) => {
    // Update input box with the polygon coordinates
    var latlngs = latlngs.map(function(coord) { return "" + coord.lng.toFixed(6) + " " + coord.lat.toFixed(6); });
    var polygon_field = document.getElementById('plot_polygon');
    // Define polygon (including first point as final point to close the shape)
    polygon_field.value = "POLYGON ((" + latlngs.join(', ') + ", " + latlngs[0] + "))";
  };

  <% if plot.new_record? %>
    map.setView(<%= Plot::DEFAULT_COORDS %>, 19);
    // FeatureGroup is to store editable layers
    var drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);
    var drawControl = new L.Control.Draw({
      draw: {
        polyline: false,
        rectangle: false,
        circle: false,
        circlemarker: false,
        marker: false
      },
      edit: false
    });
    map.addControl(drawControl);

    map.on(L.Draw.Event.CREATED, function (e) {
      var type = e.layerType,
      layer = e.layer;
      // Add completed polygon to the map
      map.addLayer(layer);
      layer.editing.enable();
      // Remove 'draw' button to prevent drawing more than one polygon.
      map.removeControl(drawControl);

      // Update the form input once the polygon is drawn
      copyCoordsToFormField(layer._latlngs[0]);
    });

    // Re-update the form input when any polygon points are moved
    map.on(L.Draw.Event.EDITVERTEX, (e) => copyCoordsToFormField(e.poly._latlngs[0]));
  <% else %>
    // Draw the plot!
    // create a red polygon from the plot's LatLng points (x,y converted to y,x and excluding final duplicate point)
    var latlngs = <%= plot.polygon.coordinates[0][0...-1].map(&:reverse) %>;
    var polygon = L.polygon(latlngs, { color: 'red' }).addTo(map);
    // zoom the map to the polygon
    const LAT_BUFFER = 0.00001;
    const LNG_BUFFER = 0.0001;
    var bounds = polygon.getBounds();
    bounds._northEast.lat += LAT_BUFFER;
    bounds._northEast.lng += LNG_BUFFER;
    bounds._southWest.lat -= LAT_BUFFER;
    bounds._southWest.lng -= LNG_BUFFER;
    map.fitBounds(bounds);
  <% end %>
</script>
