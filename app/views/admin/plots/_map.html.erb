<script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"/>

<script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css"/>

<div id="map" style="width: 100%; height: 500px;" class="mt-3"></div>

<script>
  var map = L.map('map');

  const layer_osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors',
    maxNativeZoom: 19,
    maxZoom: 22
  });

  const layer_here = L.tileLayer('https://3.aerial.maps.ls.hereapi.com/maptile/2.1/maptile/newest/satellite.day/{z}/{x}/{y}/256/png?apiKey=<%= ENV.fetch('HERE_MAPS_API_KEY') %>', {
    attribution: '&copy; <a href="https://developer.here.com/" target="_blank">HERE</a>',
    maxNativeZoom: 19,
    maxZoom: 22
  });

  const layer_google = L.tileLayer('https://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', {
    attribution: '&copy; Google',
    maxNativeZoom: 19,
    maxZoom: 22
  });

  layer_google.addTo(map);

  var baseMaps = {
    'Google': layer_google,
    'HERE Maps': layer_here,
    'OpenStreetMap': layer_osm
  };

  L.control.layers(baseMaps, {}, { position: 'bottomleft' }).addTo(map);

  const handlePolygonChange = (latlngs) => {
    copyCoordsToFormField(latlngs);
    updatePolygonArea(latlngs);
  }

  const copyCoordsToFormField = (latlngs) => {
    var latlngs = latlngs.map(function(coord) { return "" + coord.lng.toFixed(6) + " " + coord.lat.toFixed(6); });
    var polygon_field = document.getElementById('plot_polygon');
    // Define polygon (including first point as final point to close the shape)
    polygon_field.value = "POLYGON ((" + latlngs.join(', ') + ", " + latlngs[0] + "))";
  };

  const updatePolygonArea = (latlngs) => {
    var area_m = L.GeometryUtil.geodesicArea(latlngs);
    var area_acre = area_m / 4046.86;
    document.getElementById('approx_area').value = '' + area_m.toFixed(0) + ' m^3 or ' + area_acre.toFixed(4) + ' acres';
  };

  const renderPolygon = (map, latlngs, polygon_colour, editable) => {
    var polygon = L.polygon(latlngs, { color: polygon_colour }).addTo(map);

    if (editable) {
      polygon.editing.enable();
    }

    fitMapToPolygon(map, polygon);

    return polygon;
  };

  const fitMapToPolygon = (map, polygon) => {
    const LAT_BUFFER = 0.00001;
    const LNG_BUFFER = 0.0001;
    var bounds = polygon.getBounds();
    bounds._northEast.lat += LAT_BUFFER;
    bounds._northEast.lng += LNG_BUFFER;
    bounds._southWest.lat -= LAT_BUFFER;
    bounds._southWest.lng -= LNG_BUFFER;
    map.fitBounds(bounds);
  };

  <% if plot.polygon.nil? # i.e. new record and no invalid polygon set %>
    map.setView(<%= Plot::DEFAULT_COORDS %>, 19);
    // FeatureGroup is to store editable layers
    var drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);

    var drawControl = new L.Control.Draw({
      draw: {
        polyline: false,
        rectangle: false,
        circle: false,
        circlemarker: false,
        marker: false
      },
      edit: false
    });

    map.addControl(drawControl);

    map.on(L.Draw.Event.CREATED, function (e) {
      var type = e.layerType,
      layer = e.layer;
      // Add completed polygon to the map
      map.addLayer(layer);
      layer.editing.enable();
      // Remove 'draw' button to prevent drawing more than one polygon.
      map.removeControl(drawControl);

      // Update the form input once the polygon is drawn
      handlePolygonChange(layer._latlngs[0]);
    });
  <% else # polygon is present %>
    // Prepare lat/lng points: x,y converted to y,x and excluding final (dupe) point
    var latlngs = <%= plot.polygon.coordinates[0][0...-1].map(&:reverse) %>;
    var polygon = renderPolygon(map, latlngs, '<%= plot.new_record? ? 'blue' : 'red' %>', <%= plot.new_record? %>);

    updatePolygonArea(polygon._latlngs[0])
  <% end %>

  // Re-update the form input when any polygon points are moved
  map.on(L.Draw.Event.EDITVERTEX, (e) => handlePolygonChange(e.poly._latlngs[0]));
</script>
