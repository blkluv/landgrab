<script src="https://assets.what3words.com/sdk/v3/what3words.js?key=<%= ENV.fetch('WHAT3WORDS_API_KEY') %>"></script>

<script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"/>

<script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css"/>

<script src='https://unpkg.com/leaflet.fullscreen@2.4.0/Control.FullScreen.js'></script>
<link rel="stylesheet" href='https://unpkg.com/leaflet.fullscreen@2.4.0/Control.FullScreen.css' />

<div id="map" style="width: 100%; height: 500px" class="mb-3"></div>

<% popup_blocks ||= [] %>
<%= render 'static_pages/map_legend', show_current: popup_blocks.any? %>

<% blocks = blocks.each { |b| b.map_popup = popup_blocks.include?(b) } %>
<script>
  function onEachFeature(feature, layer) {
    if (feature.properties && feature.properties.popupContent) {
      var popupContent = feature.properties.popupContent;
      layer.bindPopup(popupContent);
    } else if (feature.properties && feature.properties.link) {
      layer.on({
        click: () => { location = feature.properties.link; }
      });
    }
  }

  function blockStyle(feature) {
    const base = { color: 'black', weight: 2 }
    // Style docs: https://leafletjs.com/reference.html#path-option
    if (feature.geometry.properties && feature.geometry.properties.popupContent) {
      return {...base, ...{ opacity: 0.65, fill: true, fillOpacity: 0.5, fillColor: 'limegreen' }};
    } else if (feature.geometry.properties && feature.geometry.properties.available) {
      return {...base, ...{ fillColor: "#3388ff", fillOpacity: 0.3 }};
    } else {
      return {...base, ...{ fillColor: "darkred", fillOpacity: 0.3 }};
    }
  };

  var map = L.map('map');

  // https://github.com/brunob/leaflet.fullscreen
  const fullscreen_btn = L.control.fullscreen({
    position: 'topleft',
    forceSeparateButton: true
  })
  fullscreen_btn.addTo(map);

  const layer_osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors',
    maxNativeZoom: 19,
    maxZoom: 20
  });

  const layer_here = L.tileLayer('https://3.aerial.maps.ls.hereapi.com/maptile/2.1/maptile/newest/satellite.day/{z}/{x}/{y}/256/png?apiKey=<%= ENV.fetch('HERE_MAPS_API_KEY') %>', {
    attribution: '&copy; <a href="https://developer.here.com/" target="_blank">HERE</a>',
    maxNativeZoom: 19,
    maxZoom: 20
  });

  const layer_google = L.tileLayer('https://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', {
    attribution: '&copy; Google',
    maxNativeZoom: 19,
    maxZoom: 20
  });

  layer_google.addTo(map);

  var baseMaps = {
    'OpenStreetMap': layer_osm,
    'HERE Maps': layer_here,
    'Google': layer_google
  };

  L.control.layers(baseMaps, {}, { position: 'bottomleft' }).addTo(map);

  var allBlocksGeoJson = [<%= blocks.map(&:to_geojson).join(', ').html_safe %>];
  var blocks = L.geoJSON(allBlocksGeoJson, { onEachFeature: onEachFeature, style: blockStyle }).addTo(map);

  map.fitBounds(blocks.getBounds())

  function drawGrid() {
    const zoom = map.getZoom();
    const loadFeatures = zoom > 17;

    if (loadFeatures) { // Zoom level is high enough
      var ne = map.getBounds().getNorthEast();
      var sw = map.getBounds().getSouthWest();

      // Call the what3words Grid API to obtain the grid squares within the current visble bounding box
      what3words.api
        .gridSectionGeoJson({
          southwest: {
            lat: sw.lat,
            lng: sw.lng
          },
          northeast: {
            lat: ne.lat,
            lng: ne.lng
          }
        }).then(function(data) {
          // If the grid layer is already present, remove it as it will need to be replaced by the new grid section
          if (typeof grid_layer !== 'undefined') {
            map.removeLayer(grid_layer);
          }

          // Create a new GeoJSON layer, based on the GeoJSON returned from the what3words API
          grid_layer = L.geoJSON(data, {
            style: function() {
              return {
                color: '#777',
                stroke: true,
                weight: 0.5
              };
            }
          }).addTo(map);
        }).catch(console.error);
    } else {
      // If the grid layer already exists, remove it as the zoom level no longer requires the grid to be displayed
      if (typeof grid_layer !== 'undefined') {
        map.removeLayer(grid_layer);
      }
    }
  }

  map.whenReady(drawGrid);
  map.on('move', drawGrid);
</script>
