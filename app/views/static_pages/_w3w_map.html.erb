<% popup_tiles ||= [] %>
<% tiles ||= [] %>
<% plot ||= nil %>
<% hide_legend ||= false %>
<% map_height ||= '500px' %>
<% featured_description ||= 'Current Tile' %>
<% non_focussed_modal_type ||= nil %>

<script src="https://assets.what3words.com/sdk/v3/what3words.js?key=<%= ENV.fetch('WHAT3WORDS_API_KEY') %>"></script>

<%= render 'layouts/leaflet_imports' %>

<%= render 'layouts/leaflet_helpers' %>

<div id="map" style="width: 100%; height: <%= map_height %>" class="mb-3"></div>

<% unless hide_legend %>
  <%= render 'static_pages/map_legend',
             show_current: popup_tiles.any?,
             featured_description: featured_description %>
<% end %>

<% tiles = tiles.each { |t| t.map_popup = popup_tiles.include?(t) ? :w3w : non_focussed_modal_type } %>

<script>
  function onEachFeature(feature, layer) {
    if (feature.properties && feature.properties.popupContent) {
      layer.bindPopup(feature.properties.popupContent);
    } else if (feature.properties && feature.properties.link) {
      layer.on({
        click: () => { location = feature.properties.link; }
      });
    }
  }

  function tileStyle(feature) {
    const base = { color: 'black', weight: 2 }
    // Style docs: https://leafletjs.com/reference.html#path-option
    if (feature.geometry.properties && feature.geometry.properties.focussed) {
      return {...base, ...{ opacity: 0.65, fill: true, fillOpacity: 0.5, fillColor: 'limegreen' }};
    } else if (feature.geometry.properties && feature.geometry.properties.available) {
      return {...base, ...{ fillColor: "#3388ff", fillOpacity: 0.3 }};
    } else {
      return {...base, ...{ fillColor: "darkred", fillOpacity: 0.3 }};
    }
  };

  var map = L.map('map');

  addFullscreenButton(map);
  addAllLayers(map);

  var allTilesGeoJson = [<%= tiles.map(&:to_geojson).join(', ').html_safe %>];
  var tiles = L.geoJSON(allTilesGeoJson, { onEachFeature: onEachFeature, style: tileStyle }).addTo(map);

  <% if plot.present? %>
    // Fit map to plot bounds
    var latlngs = <%= plot.polygon.coordinates[0][0...-1].map(&:reverse) %>;
    var polygon = L.polygon(latlngs); // Note: not adding to map
    // fitMapToPolygon(map, polygon);
    map.fitBounds(polygon.getBounds());
  <% else %>
    // Fit map to tile bounds
    map.fitBounds(tiles.getBounds());
  <% end %>

  function drawGrid() {
    const zoom = map.getZoom();
    const loadFeatures = zoom > 17;

    if (loadFeatures) { // Zoom level is high enough
      var ne = map.getBounds().getNorthEast();
      var sw = map.getBounds().getSouthWest();

      // Call the what3words Grid API to obtain the grid squares within the current visble bounding box
      what3words.api
        .gridSectionGeoJson({
          southwest: {
            lat: sw.lat,
            lng: sw.lng
          },
          northeast: {
            lat: ne.lat,
            lng: ne.lng
          }
        }).then(function(data) {
          // If the grid layer is already present, remove it as it will need to be replaced by the new grid section
          if (typeof grid_layer !== 'undefined') {
            map.removeLayer(grid_layer);
          }

          // Create a new GeoJSON layer, based on the GeoJSON returned from the what3words API
          grid_layer = L.geoJSON(data, {
            style: function() {
              return {
                color: '#777',
                stroke: true,
                weight: 0.5
              };
            }
          }).addTo(map);
        }).catch(console.error);
    } else {
      // If the grid layer already exists, remove it as the zoom level no longer requires the grid to be displayed
      if (typeof grid_layer !== 'undefined') {
        map.removeLayer(grid_layer);
      }
    }
  }

  map.whenReady(drawGrid);
  map.on('move', drawGrid);
</script>
